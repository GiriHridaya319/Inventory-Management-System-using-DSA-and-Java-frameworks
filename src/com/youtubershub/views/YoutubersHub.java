/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.youtubershub.views;

import com.youtubershub.Util.StringUtil;
import com.youtubershub.controller.SearchingData;
import com.youtubershub.controller.SortTableData;
import com.youtubershub.model.YoutuberHubModel;
import java.awt.Color;
import java.awt.Font;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hridaya giri
 */
public class YoutubersHub extends javax.swing.JFrame {
ArrayList<YoutuberHubModel> youtuberChannelsList = new ArrayList();
    

    public YoutubersHub() {
        


        initComponents();
        updatePanel.setVisible(false);
        addNewDataPanel.setVisible(false);
        
        YoutubersHubDetail.getTableHeader().
                setFont(new Font("Segoe UI",Font.BOLD,12));
        YoutubersHubDetail.getTableHeader().
                setOpaque(false);
        YoutubersHubDetail.getTableHeader().
                setBackground(new Color(32,136,203));
        YoutubersHubDetail.getTableHeader().
                setForeground(new Color(128,0,0));
        YoutubersHubDetail.setRowHeight(25);
        

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainSystemPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        YoutubersHubDetail = new javax.swing.JTable();
        updatePanel = new javax.swing.JPanel();
        newYoutuberName = new javax.swing.JTextField();
        newUploads = new javax.swing.JTextField();
        newChannelLink = new javax.swing.JTextField();
        lblUpdateSubs = new javax.swing.JLabel();
        lblUpdateYoutuberName = new javax.swing.JLabel();
        lblUpdateYoutuberType = new javax.swing.JLabel();
        lblChannelLink = new javax.swing.JLabel();
        lblUpdateGrade = new javax.swing.JLabel();
        newSubsribers = new javax.swing.JTextField();
        newCountry = new javax.swing.JTextField();
        lblUpdateNetworth = new javax.swing.JLabel();
        lblUpdateCountry = new javax.swing.JLabel();
        lblUpdateActivityStatus = new javax.swing.JLabel();
        lblUpdateUploads = new javax.swing.JLabel();
        lblUpdateDate = new javax.swing.JLabel();
        newUserCreateDate = new javax.swing.JTextField();
        newGlobalRank = new javax.swing.JTextField();
        lblUpdateRank = new javax.swing.JLabel();
        newYoutuberType = new javax.swing.JComboBox<>();
        newGrades = new javax.swing.JComboBox<>();
        newNetworth = new javax.swing.JPasswordField();
        newradioButton2 = new javax.swing.JRadioButton();
        newradioButton3 = new javax.swing.JRadioButton();
        newradioButton1 = new javax.swing.JRadioButton();
        lblUpdateHeading = new javax.swing.JLabel();
        tf_SearchYoutuberName1 = new javax.swing.JTextField();
        comboFilterComboBox = new javax.swing.JComboBox<>();
        deleteRowButton = new javax.swing.JButton();
        updateExistingButton = new javax.swing.JButton();
        sortTableAscending = new javax.swing.JButton();
        addNewData = new javax.swing.JButton();
        addNewDataPanel = new javax.swing.JPanel();
        lblAddActiveStatus = new javax.swing.JLabel();
        radioButton3 = new javax.swing.JRadioButton();
        radioButton1 = new javax.swing.JRadioButton();
        radioButton2 = new javax.swing.JRadioButton();
        clearButtonAdd = new javax.swing.JButton();
        lblAddYoutuberName = new javax.swing.JLabel();
        tf_Youtuber_Name = new javax.swing.JTextField();
        lblAddRank = new javax.swing.JLabel();
        tf_addRank = new javax.swing.JTextField();
        lblAddYoutuberType = new javax.swing.JLabel();
        comboBox_YoutuberType = new javax.swing.JComboBox<>();
        lblAddChannelLink = new javax.swing.JLabel();
        tf_channelLink = new javax.swing.JTextField();
        lblAddGrade = new javax.swing.JLabel();
        comboBox_Grade = new javax.swing.JComboBox<>();
        lblSubscriber = new javax.swing.JLabel();
        tf_Subscribers = new javax.swing.JTextField();
        lblCountry = new javax.swing.JLabel();
        tf_country = new javax.swing.JTextField();
        lblNetworth = new javax.swing.JLabel();
        passAddNetworth = new javax.swing.JPasswordField();
        lblUserCreated = new javax.swing.JLabel();
        tf_userCreatedDate = new javax.swing.JTextField();
        lblUploads = new javax.swing.JLabel();
        tf_AddUploads = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        lblAddnNewDataHeading = new javax.swing.JLabel();
        comboFilterComboBox1 = new javax.swing.JComboBox<>();
        menuBarPanel = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        menuBarButton3 = new javax.swing.JButton();
        homePagebutton = new javax.swing.JButton();
        menuBarButton2 = new javax.swing.JButton();
        menuBarButton5 = new javax.swing.JButton();
        menuBarButton4 = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        tf_SearchYoutuberName2 = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        lblFilterBy = new javax.swing.JLabel();
        searchCombo = new javax.swing.JComboBox<>();
        searchTableData = new javax.swing.JButton();
        lblMrbeastImage = new javax.swing.JLabel();
        lblCarryminatiImage = new javax.swing.JLabel();
        lblEminemImage = new javax.swing.JLabel();
        lblKsiImage = new javax.swing.JLabel();
        sortTableDescending = new javax.swing.JButton();
        lblPwedipieImage = new javax.swing.JLabel();
        lblDpImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainSystemPanel.setBackground(new java.awt.Color(41, 49, 57));
        mainSystemPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainSystemPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setForeground(new java.awt.Color(246, 155, 155));

        YoutubersHubDetail.setBackground(new java.awt.Color(244, 156, 148));
        YoutubersHubDetail.setBorder(new javax.swing.border.MatteBorder(null));
        YoutubersHubDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"9", "Pwedipie", "Gamming", "https://www.youtube.com/@PewDiePie", "B+", "111M", "Sweden", "120M", "2010-04-29", "4744", "Active"},
                {"289", "Airrack", "Entertainment", "https://www.youtube.com/@airrack", "B+", "12M", "Usa", "2M", "2015-01-03", "192", "Very Active"},
                {"2", "Mr beast", "Entertainment", "https://www.youtube.com/@MrBeast", "A++", "210M", "Usa", "500M", "2012-02-20", "771", "Active"},
                {"36", "Eminem Music", "Music", "https://www.youtube.com/@eminem", "A+", "58M", "Usa", "250M", "2007-02-09", "159", "Not Really"},
                {"39", "Marshmello", "Music", "https://www.youtube.com/@marshmello", "B-", "56M", "Usa", "50M", "2015-04-06", "454", "Not Really "},
                {"80", "Carryminati", "Commentry satire", "https://www.youtube.com/@CarryMinati", "B+", "40M", "India", "5M", "2014-10-30", "191", "Active"},
                {"1", "Tseries", "Entertainment", "https://www.youtube.com/@tseries", "A++", "254M", "India", "432M", "2006-03-13", "19924", "Very Active"},
                {"73", "Ricis Official", "Entertainment", "https://www.youtube.com/@RicisOfficial1795", "A-", "41M", "Indonesia", "9M", "2006-01-15", "3537", "Active"},
                {"43", "A4", "Vlogging", "https://www.youtube.com/@A4a4a4a4/videos", "A", "49M", "Belarus", "133M", "2014-11-29", "843", "Active"}
            },
            new String [] {
                "GlobalRank", "YoutuberName", "YoutuberType", "ChannelLink", "Grade", "Subscriber", "Country", "NetWorth(in $)", "UserCreated", "Uploads", "ActivityStatus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        YoutubersHubDetail.setFocusable(false);
        YoutubersHubDetail.setRowHeight(25);
        YoutubersHubDetail.setSelectionBackground(new java.awt.Color(232, 57, 95));
        YoutubersHubDetail.setShowGrid(false);
        YoutubersHubDetail.setShowHorizontalLines(true);
        YoutubersHubDetail.setShowVerticalLines(true);
        YoutubersHubDetail.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(YoutubersHubDetail);
        if (YoutubersHubDetail.getColumnModel().getColumnCount() > 0) {
            YoutubersHubDetail.getColumnModel().getColumn(0).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(0).setPreferredWidth(25);
            YoutubersHubDetail.getColumnModel().getColumn(1).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(1).setPreferredWidth(35);
            YoutubersHubDetail.getColumnModel().getColumn(2).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(3).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(4).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(4).setPreferredWidth(5);
            YoutubersHubDetail.getColumnModel().getColumn(5).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(5).setPreferredWidth(25);
            YoutubersHubDetail.getColumnModel().getColumn(6).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(6).setPreferredWidth(25);
            YoutubersHubDetail.getColumnModel().getColumn(7).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(7).setPreferredWidth(50);
            YoutubersHubDetail.getColumnModel().getColumn(8).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(8).setPreferredWidth(35);
            YoutubersHubDetail.getColumnModel().getColumn(9).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(9).setPreferredWidth(15);
            YoutubersHubDetail.getColumnModel().getColumn(10).setResizable(false);
            YoutubersHubDetail.getColumnModel().getColumn(10).setPreferredWidth(40);
        }

        mainSystemPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 480, 1160, 240));

        updatePanel.setBackground(new java.awt.Color(49, 131, 163));
        updatePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        newYoutuberName.setBackground(new java.awt.Color(204, 204, 204));
        newYoutuberName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newYoutuberName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 132, 30));

        newUploads.setBackground(new java.awt.Color(204, 204, 204));
        newUploads.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newUploads, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 150, 132, 30));

        newChannelLink.setBackground(new java.awt.Color(204, 204, 204));
        newChannelLink.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newChannelLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 132, 30));

        lblUpdateSubs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateSubs.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateSubs.setText("Subscriber");
        updatePanel.add(lblUpdateSubs, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, 81, 31));

        lblUpdateYoutuberName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateYoutuberName.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateYoutuberName.setText("Youtuber Name");
        updatePanel.add(lblUpdateYoutuberName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 96, 31));

        lblUpdateYoutuberType.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateYoutuberType.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateYoutuberType.setText("Youtuber Type");
        updatePanel.add(lblUpdateYoutuberType, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 90, 31));

        lblChannelLink.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblChannelLink.setForeground(new java.awt.Color(231, 159, 3));
        lblChannelLink.setText("Channel Link");
        updatePanel.add(lblChannelLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 81, 31));

        lblUpdateGrade.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateGrade.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateGrade.setText("Grade");
        updatePanel.add(lblUpdateGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 70, 31));

        newSubsribers.setBackground(new java.awt.Color(204, 204, 204));
        newSubsribers.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newSubsribers, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 132, 30));

        newCountry.setBackground(new java.awt.Color(204, 204, 204));
        newCountry.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 132, 30));

        lblUpdateNetworth.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateNetworth.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateNetworth.setText("Networth");
        updatePanel.add(lblUpdateNetworth, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 81, 31));

        lblUpdateCountry.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateCountry.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateCountry.setText("Country");
        updatePanel.add(lblUpdateCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, 81, 31));

        lblUpdateActivityStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateActivityStatus.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateActivityStatus.setText("Activity Status");
        updatePanel.add(lblUpdateActivityStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, 100, 31));

        lblUpdateUploads.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateUploads.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateUploads.setText("Uploads");
        updatePanel.add(lblUpdateUploads, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 81, 31));

        lblUpdateDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateDate.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateDate.setText("User Create Date");
        updatePanel.add(lblUpdateDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 100, 31));

        newUserCreateDate.setBackground(new java.awt.Color(204, 204, 204));
        newUserCreateDate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newUserCreateDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 132, 30));

        newGlobalRank.setBackground(new java.awt.Color(204, 204, 204));
        newGlobalRank.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        updatePanel.add(newGlobalRank, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 132, 30));

        lblUpdateRank.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUpdateRank.setForeground(new java.awt.Color(231, 159, 3));
        lblUpdateRank.setText("Global Rank");
        updatePanel.add(lblUpdateRank, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 81, 31));

        newYoutuberType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Gamming", "Comedy", "Entertainment", "Music", "Vlogging" }));
        updatePanel.add(newYoutuberType, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 130, 30));

        newGrades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "A", "A+", "A++", "A-", "B+", "B-" }));
        updatePanel.add(newGrades, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 130, 30));
        updatePanel.add(newNetworth, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 130, 30));

        newradioButton2.setBackground(new java.awt.Color(0, 0, 0));
        newradioButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newradioButton2.setForeground(new java.awt.Color(231, 159, 3));
        newradioButton2.setText("Very Active");
        updatePanel.add(newradioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, 90, 20));

        newradioButton3.setBackground(new java.awt.Color(0, 0, 0));
        newradioButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newradioButton3.setForeground(new java.awt.Color(231, 159, 3));
        newradioButton3.setText("Not really");
        newradioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newradioButton3ActionPerformed(evt);
            }
        });
        updatePanel.add(newradioButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 240, 80, 20));

        newradioButton1.setBackground(new java.awt.Color(0, 0, 0));
        newradioButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newradioButton1.setForeground(new java.awt.Color(231, 159, 3));
        newradioButton1.setText("Active");
        updatePanel.add(newradioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, 70, 20));

        lblUpdateHeading.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblUpdateHeading.setText("LETS EDIT SOME ROWS");
        updatePanel.add(lblUpdateHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        mainSystemPanel.add(updatePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 490, 530, 300));

        tf_SearchYoutuberName1.setBackground(new java.awt.Color(204, 204, 204));
        tf_SearchYoutuberName1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        mainSystemPanel.add(tf_SearchYoutuberName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 360, 200, 40));

        comboFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YoutuberName", "ChannelLink", "Subscriber", "UserCreated", "NetWorth(in $)", "Grade" }));
        comboFilterComboBox.setBorder(new javax.swing.border.MatteBorder(null));
        mainSystemPanel.add(comboFilterComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 360, 170, 40));

        deleteRowButton.setBackground(new java.awt.Color(57, 108, 149));
        deleteRowButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteRowButton.setText("DELETE ");
        deleteRowButton.setBorderPainted(false);
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowButtonActionPerformed(evt);
            }
        });
        mainSystemPanel.add(deleteRowButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 420, 140, 40));

        updateExistingButton.setBackground(new java.awt.Color(57, 108, 149));
        updateExistingButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateExistingButton.setText("UPDATE");
        updateExistingButton.setBorderPainted(false);
        updateExistingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateExistingButtonActionPerformed(evt);
            }
        });
        mainSystemPanel.add(updateExistingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 420, 120, 40));

        sortTableAscending.setBackground(new java.awt.Color(57, 108, 149));
        sortTableAscending.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        sortTableAscending.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/AscendingSortimage.png"))); // NOI18N
        sortTableAscending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTableAscendingActionPerformed(evt);
            }
        });
        mainSystemPanel.add(sortTableAscending, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 440, 40, 40));

        addNewData.setBackground(new java.awt.Color(57, 108, 149));
        addNewData.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addNewData.setText("ADD");
        addNewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewDataActionPerformed(evt);
            }
        });
        mainSystemPanel.add(addNewData, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 420, 130, 40));

        addNewDataPanel.setBackground(new java.awt.Color(41, 49, 57));

        lblAddActiveStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddActiveStatus.setForeground(new java.awt.Color(231, 159, 3));
        lblAddActiveStatus.setText("Active Status");

        radioButton3.setBackground(new java.awt.Color(0, 0, 0));
        radioButton3.setForeground(new java.awt.Color(231, 159, 3));
        radioButton3.setText("Active");
        radioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton3ActionPerformed(evt);
            }
        });

        radioButton1.setBackground(new java.awt.Color(0, 0, 0));
        radioButton1.setForeground(new java.awt.Color(231, 159, 3));
        radioButton1.setText("Very Active");

        radioButton2.setBackground(new java.awt.Color(0, 0, 0));
        radioButton2.setForeground(new java.awt.Color(231, 159, 3));
        radioButton2.setText("Not Really");

        clearButtonAdd.setBackground(new java.awt.Color(28, 129, 209));
        clearButtonAdd.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 12)); // NOI18N
        clearButtonAdd.setText("CLEAR");
        clearButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonAddActionPerformed(evt);
            }
        });

        lblAddYoutuberName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddYoutuberName.setForeground(new java.awt.Color(231, 159, 3));
        lblAddYoutuberName.setText("Youtuber Name");

        tf_Youtuber_Name.setBackground(new java.awt.Color(204, 204, 204));
        tf_Youtuber_Name.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblAddRank.setBackground(new java.awt.Color(204, 204, 204));
        lblAddRank.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddRank.setForeground(new java.awt.Color(231, 159, 3));
        lblAddRank.setText("Global Rank");

        tf_addRank.setBackground(new java.awt.Color(204, 204, 204));
        tf_addRank.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblAddYoutuberType.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddYoutuberType.setForeground(new java.awt.Color(231, 159, 3));
        lblAddYoutuberType.setText("Youtuber Type");

        comboBox_YoutuberType.setBackground(new java.awt.Color(204, 204, 204));
        comboBox_YoutuberType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Gamming", "Comedy", "Entertainment", "Music", "Vlogging" }));
        comboBox_YoutuberType.setBorder(new javax.swing.border.MatteBorder(null));

        lblAddChannelLink.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddChannelLink.setForeground(new java.awt.Color(231, 159, 3));
        lblAddChannelLink.setText("Channel Link");

        tf_channelLink.setBackground(new java.awt.Color(204, 204, 204));
        tf_channelLink.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblAddGrade.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddGrade.setForeground(new java.awt.Color(231, 159, 3));
        lblAddGrade.setText("Grade");

        comboBox_Grade.setBackground(new java.awt.Color(204, 204, 204));
        comboBox_Grade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "A", "A+", "A++", "A-", "B+", "B-" }));
        comboBox_Grade.setBorder(new javax.swing.border.MatteBorder(null));

        lblSubscriber.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSubscriber.setForeground(new java.awt.Color(231, 159, 3));
        lblSubscriber.setText("Subscribers");

        tf_Subscribers.setBackground(new java.awt.Color(204, 204, 204));
        tf_Subscribers.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblCountry.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCountry.setForeground(new java.awt.Color(231, 159, 3));
        lblCountry.setText("Country");

        tf_country.setBackground(new java.awt.Color(204, 204, 204));
        tf_country.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblNetworth.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNetworth.setForeground(new java.awt.Color(231, 159, 3));
        lblNetworth.setText("Networth(in$)");

        passAddNetworth.setBackground(new java.awt.Color(204, 204, 204));
        passAddNetworth.setToolTipText("");
        passAddNetworth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        passAddNetworth.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        lblUserCreated.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUserCreated.setForeground(new java.awt.Color(231, 159, 3));
        lblUserCreated.setText("User created");

        tf_userCreatedDate.setBackground(new java.awt.Color(204, 204, 204));
        tf_userCreatedDate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblUploads.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUploads.setForeground(new java.awt.Color(231, 159, 3));
        lblUploads.setText("Uploads");

        tf_AddUploads.setBackground(new java.awt.Color(204, 204, 204));
        tf_AddUploads.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        jPanel6.setBackground(new java.awt.Color(28, 129, 209));

        lblAddnNewDataHeading.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        lblAddnNewDataHeading.setForeground(new java.awt.Color(22, 28, 33));
        lblAddnNewDataHeading.setText("LET'S ADD  SOME NEW YOUTUBE CHANNEL INFO");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddnNewDataHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddnNewDataHeading)
                .addContainerGap())
        );

        javax.swing.GroupLayout addNewDataPanelLayout = new javax.swing.GroupLayout(addNewDataPanel);
        addNewDataPanel.setLayout(addNewDataPanelLayout);
        addNewDataPanelLayout.setHorizontalGroup(
            addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewDataPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewDataPanelLayout.createSequentialGroup()
                        .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddYoutuberName)
                            .addComponent(lblAddRank)
                            .addComponent(lblAddYoutuberType)
                            .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tf_channelLink)
                                .addComponent(comboBox_YoutuberType, javax.swing.GroupLayout.Alignment.LEADING, 0, 228, Short.MAX_VALUE)
                                .addComponent(tf_Youtuber_Name, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(comboBox_Grade, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddGrade)
                            .addComponent(tf_addRank, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(137, 137, 137)
                        .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tf_country)
                            .addComponent(lblSubscriber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCountry, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passAddNetworth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(lblNetworth, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_userCreatedDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(lblUserCreated, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUploads, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_AddUploads, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Subscribers))
                        .addGap(68, 68, 68))
                    .addGroup(addNewDataPanelLayout.createSequentialGroup()
                        .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddChannelLink)
                            .addGroup(addNewDataPanelLayout.createSequentialGroup()
                                .addComponent(lblAddActiveStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioButton1)
                                .addGap(117, 117, 117)
                                .addComponent(clearButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(addNewDataPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 103, Short.MAX_VALUE))
        );
        addNewDataPanelLayout.setVerticalGroup(
            addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewDataPanelLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubscriber)
                    .addComponent(lblAddRank))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_addRank, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_Subscribers, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddYoutuberName)
                    .addComponent(lblCountry))
                .addGap(3, 3, 3)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_Youtuber_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_country, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddYoutuberType)
                    .addComponent(lblNetworth))
                .addGap(2, 2, 2)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_YoutuberType, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passAddNetworth, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserCreated)
                    .addComponent(lblAddChannelLink))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_channelLink, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_userCreatedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewDataPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblUploads)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_AddUploads, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addNewDataPanelLayout.createSequentialGroup()
                        .addComponent(lblAddGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBox_Grade, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewDataPanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(addNewDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAddActiveStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addNewDataPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(clearButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        mainSystemPanel.add(addNewDataPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 490, 720, 540));

        comboFilterComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Country", "GlobalRank", "Uploads", "Grade", "YoutuberType", "YoutuberName", "ChannelLink", "Subscriber", "ActivityStatus", "UserCreated", "NetWorth(in $)" }));
        comboFilterComboBox1.setBorder(new javax.swing.border.MatteBorder(null));
        mainSystemPanel.add(comboFilterComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 440, 150, 40));

        menuBarPanel.setBackground(new java.awt.Color(57, 108, 149));
        menuBarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblLogo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblLogo.setForeground(new java.awt.Color(0, 51, 51));
        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/Logo.png"))); // NOI18N
        lblLogo.setText("YOUTUBERS HUB");

        menuBarButton3.setBackground(new java.awt.Color(157, 55, 55));
        menuBarButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        menuBarButton3.setText("DashBoard");
        menuBarButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarButton3ActionPerformed(evt);
            }
        });

        homePagebutton.setBackground(new java.awt.Color(157, 55, 55));
        homePagebutton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        homePagebutton.setText("Home");
        homePagebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homePagebuttonActionPerformed(evt);
            }
        });

        menuBarButton2.setBackground(new java.awt.Color(157, 55, 55));
        menuBarButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        menuBarButton2.setText("Gift and Incentives");
        menuBarButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarButton2ActionPerformed(evt);
            }
        });

        menuBarButton5.setBackground(new java.awt.Color(157, 55, 55));
        menuBarButton5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        menuBarButton5.setText("Document Store");
        menuBarButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarButton5ActionPerformed(evt);
            }
        });

        menuBarButton4.setBackground(new java.awt.Color(157, 55, 55));
        menuBarButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        menuBarButton4.setText("Adminstration");
        menuBarButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuBarPanelLayout = new javax.swing.GroupLayout(menuBarPanel);
        menuBarPanel.setLayout(menuBarPanelLayout);
        menuBarPanelLayout.setHorizontalGroup(
            menuBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBarPanelLayout.createSequentialGroup()
                .addComponent(lblLogo)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(menuBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menuBarButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuBarButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuBarButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuBarButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(homePagebutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        menuBarPanelLayout.setVerticalGroup(
            menuBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogo)
                .addGap(78, 78, 78)
                .addComponent(homePagebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(menuBarButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(menuBarButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(menuBarButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(menuBarButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainSystemPanel.add(menuBarPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 790));

        searchPanel.setBackground(new java.awt.Color(57, 108, 149));
        searchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tf_SearchYoutuberName2.setBackground(new java.awt.Color(204, 204, 204));
        tf_SearchYoutuberName2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        lblSearch.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(0, 51, 51));
        lblSearch.setText("SEARCH");

        lblFilterBy.setBackground(new java.awt.Color(105, 53, 53));
        lblFilterBy.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblFilterBy.setForeground(new java.awt.Color(0, 51, 51));
        lblFilterBy.setText("FILTER BY");

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GlobalRank", "YoutuberName", "ChannelLink", "Subscriber", "NetWorth(in $)", "Grade", "YoutuberType" }));

        searchTableData.setBackground(new java.awt.Color(157, 55, 55));
        searchTableData.setText("🔍");
        searchTableData.setBorderPainted(false);
        searchTableData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTableDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearch)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(tf_SearchYoutuberName2, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(lblFilterBy)
                        .addGap(35, 35, 35)
                        .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTableData, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_SearchYoutuberName2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTableData, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        mainSystemPanel.add(searchPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 1210, -1));

        lblMrbeastImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/YoutuberMRbeastimage.png"))); // NOI18N
        lblMrbeastImage.setText("jLabel27");
        mainSystemPanel.add(lblMrbeastImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 270, 260));

        lblCarryminatiImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/YoutuberCarryminatiImage.png"))); // NOI18N
        lblCarryminatiImage.setText("jLabel29");
        mainSystemPanel.add(lblCarryminatiImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 160, 240, 330));

        lblEminemImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/YoutuberEminemIMage.png"))); // NOI18N
        lblEminemImage.setText("jLabel30");
        mainSystemPanel.add(lblEminemImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, 290, 420));

        lblKsiImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/YoutuberKSIImage.png"))); // NOI18N
        lblKsiImage.setText("jLabel32");
        mainSystemPanel.add(lblKsiImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 160, 290, -1));

        sortTableDescending.setBackground(new java.awt.Color(57, 108, 149));
        sortTableDescending.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/descendingsortImage.png"))); // NOI18N
        sortTableDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTableDescendingActionPerformed(evt);
            }
        });
        mainSystemPanel.add(sortTableDescending, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 440, 40, 40));

        lblPwedipieImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/YoutuberPwedipieimage.png"))); // NOI18N
        lblPwedipieImage.setText("jLabel33");
        mainSystemPanel.add(lblPwedipieImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 160, 250, -1));

        lblDpImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/youtubershub/resource/YoutuberDudeperfectImage.png"))); // NOI18N
        lblDpImage.setText("jLabel31");
        mainSystemPanel.add(lblDpImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 130, 630, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainSystemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainSystemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * this method is performed when the user press the search button it 
     * searches according to the user info and displays the value in the dialog box
     * @param evt When the'searchTableData' action is executed, 
     * the ActionEvent object is created.
     */
    private void searchTableDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTableDataActionPerformed
    youtuberChannelsList.clear();                                               // clearing the arraylist
    getTableValues();                                                           // to get the table values
    String selectedColumn = (String) searchCombo.getSelectedItem();
    SortTableData.mergeSort(youtuberChannelsList,                       // calling the mergeSort method from the SortTableData
            selectedColumn);
    String search = tf_SearchYoutuberName2.getText().toLowerCase();
    if (selectedColumn.equals("Subscriber")                                // to remove the M while searching in teh subscriber and networth column
            || selectedColumn.equals("NetWorth(in $)")) {
        search = search.replaceAll("[M]", "");
    } 
    
    List<YoutuberHubModel> searchResult =                                       // calling static method from the SearchingData class 
            SearchingData.performBinarySearch(search, 
            youtuberChannelsList, 0, youtuberChannelsList.size() - 1, 
            selectedColumn);
    
    if (searchResult == null || searchResult.isEmpty()) {                       // if the binary search didnt find anything necessary message is displayed
        JOptionPane.showMessageDialog(null,
                StringUtil.NO_DATA,
        "No data to search", JOptionPane.INFORMATION_MESSAGE);
    } else {
    StringBuilder resultInfo = new StringBuilder();                             
    for (YoutuberHubModel resultModel : searchResult) {                          // looping through the searched result from the binary search and displaying in dialog box
        resultInfo.append("YoutuberName: ").append(
                resultModel.getYoutubersName()).append("\n")
                .append("GlobalRank: ").append(
                        resultModel.getGlobalRank()).append("\n")
                .append("YoutuberType: ").append(
                        resultModel.getYoutuberType()).append("\n")
                .append("ChannelLink: ").append(
                        resultModel.getChannelLink()).append("\n")
                .append("Grade: ").append(
                        resultModel.getGrade()).append("\n")
                .append("Subscriber: ").append(
                        resultModel.getSubscriber()).append("\n")
                .append("Country: ").append(
                        resultModel.getCountry()).append("\n")
                .append("NetWorth(in $): ").append(
                        resultModel.getNetWorth()).append("\n")
                .append("UserCreated: ").append(
                        resultModel.getUserCreatedDate()).append("\n")
                .append("Uploads: ").append(
                        resultModel.getUploads()).append("\n")
                .append("ActivityStatus: ").append(
                        resultModel.getActiveStatus()).append("\n\n");
        JOptionPane.showMessageDialog(null, 
                resultInfo.toString(), "Search Result", 
                JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    
}
    }//GEN-LAST:event_searchTableDataActionPerformed
 
    /**
     * this method is performed when the user presses the Add button 
     * it opens panel in the dialog box and also used to set all the textField to empty
     * @param evt When the'addNewData' action is executed, the ActionEvent object is created.
     */
    private void addNewDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewDataActionPerformed
        
        DefaultTableModel model = (DefaultTableModel)                           // creating object of the DefaultTableModel
                YoutubersHubDetail.getModel();                                  
        getTableValues();                                                       // to get the values from the table
        
        openDialogBoxToAdd(model);                                              

        
        //setting every textfield empty and comboBox to none
        tf_addRank.setText("");
        tf_AddUploads.setText("");
        tf_Subscribers.setText("");
        tf_country.setText("");
        tf_userCreatedDate.setText("");
        tf_channelLink.setText("");
        tf_Youtuber_Name.setText("");
        passAddNetworth.setText("");
        comboBox_YoutuberType.setSelectedItem("None");
        comboBox_Grade.setSelectedItem("None");
        
        
        
        

        
       
    }//GEN-LAST:event_addNewDataActionPerformed

    /**
     * this method is performed when the user presses the Add button then this method is called
     * in this method user can add new data 
     * @param model The DefaultTableModel object that represents Table Model
     */
    public void openDialogBoxToAdd(DefaultTableModel model){                    
        addNewDataPanel.setVisible(true);                                   // setting the new add panel visibilty to true
    // Assuming jPanel4 contains the necessary components for updating the row
        int addResult = JOptionPane.showConfirmDialog(null,             // initializing the addresult variable with ok_cancek_option dialog box
            addNewDataPanel, "Add New Row",
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE);
 
    
        if (addResult == JOptionPane.OK_OPTION) {                                   // if the user enters ok this statement is executed
        
            //getting all the textField text and storing in the String data type variable
            String globalRank_string = tf_addRank.getText();
            String uploads_String = tf_AddUploads.getText();

            String youtubersName = tf_Youtuber_Name.getText();
            String subscriber = tf_Subscribers.getText().toUpperCase();
            String channelLink= tf_channelLink.getText();
            String youtuberType = (String) comboBox_YoutuberType.
            getSelectedItem();
            String country = tf_country.getText(); 
            String userCreatedDate = tf_userCreatedDate.getText();
            String netWorth = passAddNetworth.getText().toUpperCase();

        
        //checking if the user left any textfield empty
        if (youtubersName.isEmpty() || globalRank_string.isEmpty() || 
            uploads_String.isEmpty() || channelLink.isEmpty() || 
                subscriber.isEmpty() || country.isEmpty() || netWorth.isEmpty() 
                || userCreatedDate.isEmpty() ) {
            JOptionPane.showMessageDialog(this, 
                StringUtil.EMPTY_FIELDS, "Empty Fields", 
                JOptionPane.QUESTION_MESSAGE);
            return;
        }
        
        //checking for exception
        int globalRank;

        try {
            globalRank = Integer.parseInt(tf_addRank.getText());

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                    StringUtil.INVALID_INPUT, 
                    "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        //checking for exception
        int uploads;
        try {
            uploads = Integer.parseInt(tf_AddUploads.getText());

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                    StringUtil.INVALID_INPUT_UP, 
                    "Invalid Input ", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        //not let user set the youtuberType to none
        if(youtuberType.equals("None")){
            JOptionPane.showMessageDialog(this,
                StringUtil.EMPTY_YOUTUBERTYPE,
                "Empty Youtube Type", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //not let youtuber name to be other than alphabet numbers and #@$& these symbols
        if (!youtubersName.matches("[A-Z0-9#@$&]+")) {
            JOptionPane.showMessageDialog(this,
           StringUtil.INVALID_YOUTUBER_NAME, "Invalid Youtuber Name",
                  JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        // settting the rule as the channel link must contain "www" in it
        if (!channelLink.contains("www")) {
            JOptionPane.showMessageDialog(null, 
            "Invalid URL. Please make sure the ChannelLink starts "
                    + "with 'www'",
            "Invalid URL", JOptionPane.ERROR_MESSAGE);
            return;
    }
        
        //not let the user to select none in the grade section
        String grade = (String) comboBox_Grade.getSelectedItem();
        if(grade.equals("None")){
            JOptionPane.showMessageDialog(this,
                "Grade cannot be left empty", "Empty Grade", 
                JOptionPane.ERROR_MESSAGE);

        }
        
            //not let the user write any thing other than number and only 2 letter allowed i.e. m and k
        if (!subscriber.matches("\\d+(M|K)?")) {
            JOptionPane.showMessageDialog(this, 
                StringUtil.INVALID_SUBSCRIBER, "Invalid Subscriber", 
                JOptionPane.ERROR_MESSAGE);
                return;
            }
        
            //not let user write anything expcept for letters
        if (!country.matches("[a-zA-Z ]+")) {
            JOptionPane.showMessageDialog(this, 
            StringUtil.INVALID_COUNTRY, "Invalid Input", 
            JOptionPane.ERROR_MESSAGE);
            return;
            }


            //not let the user write any thing other than number and only 2 letter allowed i.e. m and k
        if (!netWorth.matches("\\d+(M|K)?")) {
            JOptionPane.showMessageDialog(this, StringUtil.INVALID_NETWORTH
            , "Invalid Input",
            JOptionPane.ERROR_MESSAGE);
            return;
            }

                // only letting the user write the date in this "yyyy-MM-dd" format
        try {
            DateTimeFormatter formatter = 
            DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate.parse(userCreatedDate, formatter);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, 
            StringUtil.INVALID_DATE, "Invalid Date", 
            JOptionPane.ERROR_MESSAGE);
            return;
            }

            String activeStatus = "";
            if (radioButton1.isSelected()) {
                activeStatus = radioButton1.getText();
            } else if (radioButton2.isSelected()) {
                activeStatus = radioButton2.getText();
            } else if (radioButton3.isSelected()) {
                activeStatus = radioButton3.getText();
            }
            
            // creating object of YoutuberHubModel class
         YoutuberHubModel newYoutuber = new YoutuberHubModel
        (youtubersName, globalRank, uploads, youtuberType, channelLink, 
        grade, subscriber, country, netWorth, userCreatedDate, activeStatus);

        //looping through the arraylist to see if the new data which is added is in the table or not
        boolean dataExists = false;
        for (YoutuberHubModel youtuber : youtuberChannelsList) {
            if (youtubersName.equals(youtuber.getYoutubersName()) 
                    ||globalRank == youtuber.getGlobalRank() ||
                    channelLink.equals(youtuber.getChannelLink())) {
                dataExists = true;
                break;
            }
        }
        
        //if the added value is new than new row is added
        if (!dataExists) {
            DefaultTableModel tableModelAdd = (DefaultTableModel) 
                    YoutubersHubDetail.getModel();
            tableModelAdd.addRow(new Object[]{globalRank, 
                youtubersName, youtuberType, channelLink, grade, subscriber, 
                country, netWorth, userCreatedDate, uploads, activeStatus});
            JOptionPane.showMessageDialog(this,
            StringUtil.NEW_ADD_DATA,
            "New Data Added", JOptionPane.INFORMATION_MESSAGE);
            youtuberChannelsList.add(newYoutuber);
            
        //user is awared
        } else {

            JOptionPane.showMessageDialog(this, 
               StringUtil.DUPLICATE_DATA, 
               "Duplicate Data", JOptionPane.WARNING_MESSAGE);
        }
    }
    
}
    
    
    
    /**
     * this method is performed when the user presses the Ascending sort button
     * this button mainly sorts the table column
     * @param evt When the'sortTableAscending' action is executed, the ActionEvent object is created.
     */
    private void sortTableAscendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTableAscendingActionPerformed

        youtuberChannelsList.clear();                                            // clearing arraylist
        String comboBoxAsc = comboFilterComboBox1.getSelectedItem().toString();
          
        getTableValues();
        SortTableData.mergeSort(youtuberChannelsList, 
                comboBoxAsc);                                               // calling the sort method from the sortaTableData class
                
            DefaultTableModel tableModel = (DefaultTableModel)
                    YoutubersHubDetail.getModel();

        tableModel.setRowCount(0);                                        // seting the rowcount of the table to 0
        
        for(YoutuberHubModel rowData: youtuberChannelsList){                    // looping through the arraylist and getting all the column info
            Object[] row = {rowData.getGlobalRank(),
                rowData.getYoutubersName(), rowData.getYoutuberType()
            , rowData.getChannelLink(), rowData.getGrade(), 
            rowData.getSubscriber(), rowData.getCountry()
            , rowData.getNetWorth(), rowData.getUserCreatedDate(), 
            rowData.getUploads(),rowData.getActiveStatus()};
            tableModel.addRow(row);

        }
        JOptionPane.showMessageDialog(null, 
                "The '" + comboBoxAsc + "' Column data in the table is sorted"
                        + " in Ascending order",
                "Hello User", JOptionPane.INFORMATION_MESSAGE);

        
        
        
        
    }//GEN-LAST:event_sortTableAscendingActionPerformed

    /**
     * this method is performed when the user presses the update button
     * It calls the method where user can update the existing row of the table
     * and this method sets the new opening panel textfield with the table data 
     * 
     * @param evt When the'updateExistingButton' action is executed, the ActionEvent object is created.
     */
    private void updateExistingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateExistingButtonActionPerformed
  
        String columnNameToUpdate = (String) comboFilterComboBox
                .getSelectedItem();
        String valueToUpdate = tf_SearchYoutuberName1.getText()
                .toLowerCase(); // Convert user input to lowercase

        if(valueToUpdate.isEmpty()){                                             // check if the textfield is empty or not
            JOptionPane.showMessageDialog(null,
            StringUtil.NO_DATA_FOUND, "No data found", 
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        boolean valueFound = false;

        DefaultTableModel tableModel = (DefaultTableModel) 
                YoutubersHubDetail.getModel();
        getTableValues();

        // looping through  each row in the tableModel
        for (int i = 0; i < tableModel.getRowCount(); i++) {                      
            String tableValue = ((String) tableModel.getValueAt(i,
            getColumnIndex(columnNameToUpdate))).toLowerCase(); // Convert table data to lowercase
            if (tableValue.equals(valueToUpdate)) {                     // value entered in th textfield matches the value of the table that is selected
                updatePanel.setVisible(true);

                //the specific column value is get from the table and set in the textField
                int value = Integer.parseInt(YoutubersHubDetail.
                        getValueAt(i, 0).toString());
                newGlobalRank.setText(String.valueOf(value));
                newYoutuberName.setText((String)  tableModel.
                        getValueAt(i, 1));
                newYoutuberType.setSelectedItem((String) tableModel.
                        getValueAt(i, 2));
                newChannelLink.setText((String) tableModel.
                        getValueAt(i, 3));
                newGrades.setSelectedItem((String)  tableModel.
                        getValueAt(i, 4));
                newSubsribers.setText((String)  tableModel.
                        getValueAt(i, 5));
                newCountry.setText((String)  tableModel.
                        getValueAt(i, 6));
                newNetworth.setText((String)  tableModel.
                        getValueAt(i, 7));
                newUserCreateDate.setText((String)  tableModel.
                        getValueAt(i, 8));
                int value2 = Integer.parseInt(YoutubersHubDetail.
                        getValueAt(i, 9).toString());
                newUploads.setText(String.valueOf(value2));
                String newActivityStatuses = (String) tableModel.
                        getValueAt(i, 10);

                if (newActivityStatuses.equals(newradioButton1.
                        getText())) {
                    newradioButton1.setSelected(true);
                } else if (newActivityStatuses.equals(newradioButton2.
                        getText())) {
                    newradioButton2.setSelected(true);
                } else if (newActivityStatuses.equals(newradioButton3.
                        getText())) {
                    newradioButton3.setSelected(true);
                } 

                //another method is called where user can update the row
                openDialogBoxToUpdate(tableModel, i);
                return;
            }
        }

        if (!valueFound) {
            JOptionPane.showMessageDialog(null, 
                    "The entered value is not found in the selected "
                            + "column", "No match found", 
                            JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_updateExistingButtonActionPerformed
    
 /**
  * This method is performed when the user presses the delete button
  * it deletes the specific row from the table
  * @param evt When the'deleteRowButton' action is executed, the ActionEvent object is created.
  */   
    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed

 
        String columnNameToDelete = (
                String) comboFilterComboBox.getSelectedItem();
        String valueToDelete =
                tf_SearchYoutuberName1.getText().toLowerCase(); 

        //to check if the user has specified what to delete or not
            if(valueToDelete.isEmpty()){
                JOptionPane.showMessageDialog(null, 
                    "Please enter the column data you want to delete",
                    "No row data entered", 
                    JOptionPane.QUESTION_MESSAGE);
                    return;
            }

            DefaultTableModel tableModel = 
                    (DefaultTableModel) YoutubersHubDetail.getModel();
            getTableValues();

            // looping through  each row in the tableModel
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String tableValue = ((String) tableModel.getValueAt(i,
                        getColumnIndex(columnNameToDelete))).
                        toLowerCase(); // Convert table data to lowercase
                if (tableValue.equals(valueToDelete)) {
                    // Show a confirmation dialog box
                    int dialogResult = JOptionPane.showConfirmDialog
        (      null, StringUtil.CONFIRM_DELETE,
                "Warning", JOptionPane.YES_NO_OPTION);
                    if(dialogResult == JOptionPane.YES_OPTION){
                        tableModel.removeRow(i);
                        youtuberChannelsList.remove(i); 
                    }
                    return;
                }
            }

            JOptionPane.showMessageDialog(null,
                    StringUtil.NO_MATCH_FOUND
                ,"No match found", JOptionPane.ERROR_MESSAGE);


        
    }//GEN-LAST:event_deleteRowButtonActionPerformed
    /**
     * This methods clears all the textfield
     * @param evt When the'clearButtonAdd' action is executed, the ActionEvent object is created.
     */
    private void clearButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonAddActionPerformed
        //set all the textfield to empty and combo box to none
        tf_addRank.setText("");
        comboBox_YoutuberType.setSelectedItem("None");
        comboBox_Grade.setSelectedItem("None");
        tf_AddUploads.setText("");
        tf_Subscribers.setText("");
        tf_country.setText("");
        tf_userCreatedDate.setText("");
        tf_channelLink.setText("");
        tf_Youtuber_Name.setText("");
        passAddNetworth.setText("");
        radioButton1.setText("");
        radioButton2.setText("");
        radioButton3.setText("");
        JOptionPane.showMessageDialog(this, 
             StringUtil.CLEAR, " Work done", 
             JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_clearButtonAddActionPerformed
    /**
     * This method is called when the user tries to select many radio button
     * it does not let user select multiple radio button
     * @param evt the ActionEvent object is created.
     */
    private void radioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton3ActionPerformed
        // button group is made and all the radio buttton is added so that the 2 radio button is not selected together
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(radioButton1);
        buttonGroup.add(radioButton2);
        buttonGroup.add(radioButton3);

        if (radioButton1.isSelected() || radioButton2.isSelected()) {
            radioButton1.setSelected(false);
            radioButton2.setSelected(false);
        }
    }//GEN-LAST:event_radioButton3ActionPerformed
    /**
     * this method is only used to display dialog box
     * @param evt the ActionEvent object is created.
     */
    private void menuBarButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarButton2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, StringUtil.INFORMATION
                , "Information", 
                        JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_menuBarButton2ActionPerformed

    /**
     * this method is used to open another frame
     * @param evt the ActionEvent object is created.
     */
    private void homePagebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homePagebuttonActionPerformed
        new HomePage().setVisible(true);
            this.dispose();
    }//GEN-LAST:event_homePagebuttonActionPerformed

    /**
     * this method is only used to display dialog box
     * @param evt the ActionEvent object is created.
     */
    private void menuBarButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarButton3ActionPerformed
        JOptionPane.showMessageDialog(null, "Since this "
                + "is a prototype UI design this wont work right now",
                "Information", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_menuBarButton3ActionPerformed

    /**
     * this method is only used to display dialog box
     * @param evt the ActionEvent object is created.
     */
    private void menuBarButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarButton4ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, StringUtil.INFORMATION,
                "Information", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_menuBarButton4ActionPerformed
    /**
     * this method is only used to display dialog box
     * @param evt the ActionEvent object is created.
     */
    private void menuBarButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarButton5ActionPerformed
        JOptionPane.showMessageDialog(null, StringUtil.INFORMATION, 
                "Information", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_menuBarButton5ActionPerformed
    /**
     * this method is performed when the user presses the descending sort button
     * this button mainly sorts the table column
     * @param evt the ActionEvent object is created.
     */
    private void sortTableDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTableDescendingActionPerformed
        youtuberChannelsList.clear();
          
        String comboBox = comboFilterComboBox1.getSelectedItem().toString();
        getTableValues();
        SortTableData.mergeSort(youtuberChannelsList,               // mergeSort method is called from the SortTableData method
                comboBox);
            DefaultTableModel tableModel = (DefaultTableModel) 
                    YoutubersHubDetail.getModel();
            Collections.reverse(youtuberChannelsList);                      // using the collections class to reverse the mainarraylist to sort in decending order
                                
        // setting table count 0 and adding element from the mainArray list            
        tableModel.setRowCount(0);                                      
        
        for(YoutuberHubModel rowData: youtuberChannelsList){
            Object[] row = {rowData.getGlobalRank(), rowData.getYoutubersName(), rowData.getYoutuberType()
            , rowData.getChannelLink(), rowData.getGrade(), rowData.getSubscriber(), rowData.getCountry()
            , rowData.getNetWorth(), rowData.getUserCreatedDate(), rowData.getUploads(),rowData.getActiveStatus()};
            tableModel.addRow(row);
        }
        JOptionPane.showMessageDialog(null, 
                "The '" + comboBox+ "' Column data in the table is sorted in Descending order",
                "Hello User", JOptionPane.INFORMATION_MESSAGE);
        
        
        
    }//GEN-LAST:event_sortTableDescendingActionPerformed

    /**
     * This method is called when the user tries to select many radio button
     * it does not let user select multiple radio button
     * @param evt the ActionEvent object is created.
     */
    private void newradioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newradioButton3ActionPerformed
        
        // button group is made and all the radio buttton is added so that the 2 radio button is not selected together
        
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(newradioButton1);
        buttonGroup.add(newradioButton2);
        buttonGroup.add(newradioButton3);

        if (newradioButton1.isSelected() || newradioButton2.isSelected()) {
            newradioButton1.setSelected(false);
            newradioButton2.setSelected(false);
        }
    }//GEN-LAST:event_newradioButton3ActionPerformed

    /**
     * This method is called when the user press the update button it opens a 
     * dialog box for the user to update rows
     * @param model the DefaultTableModel object
     * @param row the index of row which is to be updated
     */
public void openDialogBoxToUpdate(DefaultTableModel model, int row) {
    updatePanel.setVisible(true);                                           // visibility of new panel is set true
    
    int result = JOptionPane.showConfirmDialog(null,                // initializing the addresult variable with ok_cancek_option dialog box
            updatePanel, "Update Row",
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE);
    
    
    

    if (result == JOptionPane.OK_OPTION) {              
    
        //getting all the value from the textfield and handiling all the posibile exception
        int newRank = 0;
        try{
        String newRankText = newGlobalRank.getText();                           
        if (!newRankText.isEmpty()) {
            newRank = Integer.parseInt(newGlobalRank.getText());
        }}
        catch(NumberFormatException ex){
                    JOptionPane.showMessageDialog(null, 
                            StringUtil.INVALID_INPUT, 
                            "Error", JOptionPane.ERROR_MESSAGE);

        }
        
        //only letters numbers and these symbols allowed in the youtuber name #@$&
        String newYoutuberNames = newYoutuberName.getText().toUpperCase();
        if (!newYoutuberNames.matches("[A-Z0-9#@$&]+")) {
        JOptionPane.showMessageDialog(this, 
             StringUtil.INVALID_YOUTUBER_NAME, 
             "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }


        //user cannot select none in the comboBox
        String newYoutuberTypes = (String) newYoutuberType.getSelectedItem();
        if(newYoutuberTypes.equals("None")){
                JOptionPane.showMessageDialog(this, 
                        StringUtil.EMPTY_YOUTUBERTYPE, 
                        "Youtuber Type cannot be left empty", 
                        JOptionPane.ERROR_MESSAGE);

            }

        // www must be in the channel link
        String newChannelLinks = newChannelLink.getText();
        if (!newChannelLinks.contains("www")) {
            JOptionPane.showMessageDialog(null,
                    StringUtil.INVALID_CHANNELLINK,
                    "Invalid URL", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //grade cannot be set none
        String newGrade = (String) newGrades.getSelectedItem();
        if(newGrade.equals("None")){
                JOptionPane.showMessageDialog(this,
                        StringUtil.INVALID_GRADE, 
                        "Error", JOptionPane.ERROR_MESSAGE);

            }
        
        //only number and m and k letters allowed 
        String newSubsriber = newSubsribers.getText().toUpperCase();
        if (!newSubsriber.matches("\\d+(M|K)?")) {
            JOptionPane.showMessageDialog(this, 
                    StringUtil.INVALID_SUBSCRIBER,
                    "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //only letters allowed
        String newCountries = newCountry.getText();
        if (!newCountries.matches("[a-zA-Z ]+")) {
        JOptionPane.showMessageDialog(this, 
                StringUtil.INVALID_COUNTRY, "Invalid Input",
                JOptionPane.ERROR_MESSAGE);
        return;
    }
        String newNetworths = newNetworth.getText().toUpperCase();
        if (!newNetworths.matches("\\d+(M|K)?")) {
        JOptionPane.showMessageDialog(this, 
                StringUtil.INVALID_NETWORTH,
                "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

        //the date should be in this format yyyy-MM-dd
        String newUserDate = newUserCreateDate.getText();
        try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDate.parse(newUserDate, formatter);
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null, 
                        StringUtil.INVALID_DATE, "Invalid Date",
                                JOptionPane.ERROR_MESSAGE);
                return;
            }

        
        String newUploadText = newUploads.getText();
        int newUpload = 0;
        try{
        if (!newUploadText.isEmpty()) {
        newUpload = Integer.parseInt(newUploads.getText());
        }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null,
                                    StringUtil.INVALID_INPUT_UP,
                             "Error", JOptionPane.ERROR_MESSAGE);

        }
        String newActivityStatuses="";
        if (newradioButton1.isSelected()) {
        newActivityStatuses =  newradioButton1.getText();
        } else if (newradioButton2.isSelected()) {
        newActivityStatuses = newradioButton2.getText();
        } else if (newradioButton3.isSelected()) {
        newActivityStatuses = newradioButton3.getText();
        }

        getTableValues();

        //not let user change the rank of the youtuber
        if (newRank != youtuberChannelsList.get(row).getGlobalRank()) {

            JOptionPane.showMessageDialog(null,
                    StringUtil.UPDATE_RANK, 
                    "Error", JOptionPane.WARNING_MESSAGE);
            return; // 
        }

        //not let user change the user created date of the youtuber
        if (!newUserDate.equals(youtuberChannelsList.get(row)
                .getUserCreatedDate())) {

            JOptionPane.showMessageDialog(null,
                    StringUtil.UPDATE_DATE, 
                    "Error", JOptionPane.WARNING_MESSAGE);
            return; // 
        }


                //not let user change the channel link of the youtuber
        if (!newChannelLinks.equals(youtuberChannelsList.
                get(row).getChannelLink())) {

            JOptionPane.showMessageDialog(null,
                    "Channel Link cannot be changed", 
                    "Error", JOptionPane.WARNING_MESSAGE);
            return; // 
        }
    
        //set the updated values in the array list
        YoutuberHubModel updatedData = youtuberChannelsList.get(row);
        updatedData.setGlobalRank(newRank);
        updatedData.setYoutuberType(newYoutuberTypes);
        updatedData.setYoutubersName(newYoutuberNames);
        updatedData.setActiveStatus(newActivityStatuses);
        updatedData.setChannelLink(newChannelLinks);
        updatedData.setGrade(newGrade);
        updatedData.setUploads(newUpload);
        updatedData.setUserCreatedDate(newUserDate);
        updatedData.setNetWorth(newNetworths);
        updatedData.setCountry(newCountries);
        updatedData.setSubscriber(newSubsriber);

        // Geting  the minimum of list size and row count
    int size = Math.min(youtuberChannelsList.size(), model.getRowCount());   
    for (int i = 0; i < size; i++) {
        YoutuberHubModel data = youtuberChannelsList.get(i);
        //all the updated value is set in the JTable
        model.setValueAt(data.getGlobalRank(), i, 
                getColumnIndex("GlobalRank"));
        model.setValueAt(data.getYoutuberType(), i, 
                getColumnIndex("YoutuberType"));
        model.setValueAt(data.getYoutubersName(), i, 
                getColumnIndex("YoutuberName"));
        model.setValueAt(data.getChannelLink(), i, 
                getColumnIndex("ChannelLink"));
        model.setValueAt(data.getGrade(), i, 
                getColumnIndex("Grade"));
        model.setValueAt(data.getSubscriber(), i, 
                getColumnIndex("Subscriber"));
        model.setValueAt(data.getCountry(), i, 
                getColumnIndex("Country"));
        model.setValueAt(data.getNetWorth(), i, 
                getColumnIndex("NetWorth(in $)"));
        model.setValueAt(data.getUserCreatedDate(), i, 
                getColumnIndex("UserCreated"));
        model.setValueAt(data.getUploads(), i, 
                getColumnIndex("Uploads"));
        model.setValueAt(data.getActiveStatus(), i, 
                getColumnIndex("ActivityStatus"));
    }

        YoutubersHubDetail.setModel(model);
        
        updatePanel.setVisible(false);
    }
}

/**
 * In this method the index of the column is to be find in the table
 * @param columnName the column name which index is left to be found
 * @return the index of h=the column if it is found otherwise -1 
 */
    public  int getColumnIndex(String columnName) {
        
    for (int i = 0; i < YoutubersHubDetail.getColumnCount(); i++) {             // loop through each column in the table
        if (YoutubersHubDetail.getColumnName(i).equals(columnName)) { //return if the current column matches the column given by user
            return i;
        }
    }
    JOptionPane.showMessageDialog(null, "Column '" +                // if column not found dialog box is displayed
            columnName + "'Not found", "Column Not Found", 
            JOptionPane.ERROR_MESSAGE);
    return -1;
}
    
    /**
     * This method gets the value of all the row , it loops through every 
     * column and gets the value and stores all the value get in the arraylist 
     */
    public void getTableValues(){
        int CountingRow = YoutubersHubDetail.getRowCount();

        //looping through each row in the table and getting the value from the column
        for (int i = 0; i < CountingRow; i++) {
            YoutuberHubModel modelClass = new YoutuberHubModel(
                    YoutubersHubDetail.getValueAt(i,
                            1).toString(),
                    Integer.parseInt(YoutubersHubDetail.
                            getValueAt(i, 0).toString()),
                    Integer.parseInt(YoutubersHubDetail.
                            getValueAt(i, 9).toString()),
                    YoutubersHubDetail.
                            getValueAt(i, 2).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 3).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 4).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 5).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 6).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 7).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 8).toString(),
                    YoutubersHubDetail.
                            getValueAt(i, 10).toString()
            );
            youtuberChannelsList.add(modelClass); // adding the value in the arrayList
        }
    }
    
    
    
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YoutubersHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YoutubersHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YoutubersHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YoutubersHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YoutubersHub().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable YoutubersHubDetail;
    private javax.swing.JButton addNewData;
    private javax.swing.JPanel addNewDataPanel;
    private javax.swing.JButton clearButtonAdd;
    private javax.swing.JComboBox<String> comboBox_Grade;
    private javax.swing.JComboBox<String> comboBox_YoutuberType;
    private javax.swing.JComboBox<String> comboFilterComboBox;
    private javax.swing.JComboBox<String> comboFilterComboBox1;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JButton homePagebutton;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddActiveStatus;
    private javax.swing.JLabel lblAddChannelLink;
    private javax.swing.JLabel lblAddGrade;
    private javax.swing.JLabel lblAddRank;
    private javax.swing.JLabel lblAddYoutuberName;
    private javax.swing.JLabel lblAddYoutuberType;
    private javax.swing.JLabel lblAddnNewDataHeading;
    private javax.swing.JLabel lblCarryminatiImage;
    private javax.swing.JLabel lblChannelLink;
    private javax.swing.JLabel lblCountry;
    private javax.swing.JLabel lblDpImage;
    private javax.swing.JLabel lblEminemImage;
    private javax.swing.JLabel lblFilterBy;
    private javax.swing.JLabel lblKsiImage;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblMrbeastImage;
    private javax.swing.JLabel lblNetworth;
    private javax.swing.JLabel lblPwedipieImage;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSubscriber;
    private javax.swing.JLabel lblUpdateActivityStatus;
    private javax.swing.JLabel lblUpdateCountry;
    private javax.swing.JLabel lblUpdateDate;
    private javax.swing.JLabel lblUpdateGrade;
    private javax.swing.JLabel lblUpdateHeading;
    private javax.swing.JLabel lblUpdateNetworth;
    private javax.swing.JLabel lblUpdateRank;
    private javax.swing.JLabel lblUpdateSubs;
    private javax.swing.JLabel lblUpdateUploads;
    private javax.swing.JLabel lblUpdateYoutuberName;
    private javax.swing.JLabel lblUpdateYoutuberType;
    private javax.swing.JLabel lblUploads;
    private javax.swing.JLabel lblUserCreated;
    private javax.swing.JPanel mainSystemPanel;
    private javax.swing.JButton menuBarButton2;
    private javax.swing.JButton menuBarButton3;
    private javax.swing.JButton menuBarButton4;
    private javax.swing.JButton menuBarButton5;
    private javax.swing.JPanel menuBarPanel;
    private javax.swing.JTextField newChannelLink;
    private javax.swing.JTextField newCountry;
    private javax.swing.JTextField newGlobalRank;
    private javax.swing.JComboBox<String> newGrades;
    private javax.swing.JPasswordField newNetworth;
    private javax.swing.JTextField newSubsribers;
    private javax.swing.JTextField newUploads;
    private javax.swing.JTextField newUserCreateDate;
    private javax.swing.JTextField newYoutuberName;
    private javax.swing.JComboBox<String> newYoutuberType;
    private javax.swing.JRadioButton newradioButton1;
    private javax.swing.JRadioButton newradioButton2;
    private javax.swing.JRadioButton newradioButton3;
    private javax.swing.JPasswordField passAddNetworth;
    private javax.swing.JRadioButton radioButton1;
    private javax.swing.JRadioButton radioButton2;
    private javax.swing.JRadioButton radioButton3;
    private javax.swing.JComboBox<String> searchCombo;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton searchTableData;
    private javax.swing.JButton sortTableAscending;
    private javax.swing.JButton sortTableDescending;
    private javax.swing.JTextField tf_AddUploads;
    private javax.swing.JTextField tf_SearchYoutuberName1;
    private javax.swing.JTextField tf_SearchYoutuberName2;
    private javax.swing.JTextField tf_Subscribers;
    private javax.swing.JTextField tf_Youtuber_Name;
    private javax.swing.JTextField tf_addRank;
    private javax.swing.JTextField tf_channelLink;
    private javax.swing.JTextField tf_country;
    private javax.swing.JTextField tf_userCreatedDate;
    private javax.swing.JButton updateExistingButton;
    private javax.swing.JPanel updatePanel;
    // End of variables declaration//GEN-END:variables
}
